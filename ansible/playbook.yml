---

- name: Configure Platform Toolkit
  hosts: workstation
  vars:
    controller_ansible_version: "{{ lookup('env', 'ANSIBLE_VERSION') | default(false, true) }}"
    terraform_version: "{{ lookup('env', 'TERRAFORM_VERSION') | default(false, true) }}"
    helm_version: "{{ lookup('env', 'HELM_VERSION') | default(false, true) }}"
    kubectl_version: "{{ lookup('env', 'KUBECTL_VERSION') | default(false, true) }}"
    gcloud_version: "{{ lookup('env', 'GCLOUD_VERSION') | default('345.0.0', true) }}"
    awscli_version: "{{ lookup('env', 'AWSCLI_VERSION') | default(false, true) }}"
    packer_version: "{{ lookup('env', 'PACKER_VERSION') | default(false, true) }}"
    vault_version: "{{ lookup('env', 'VAULT_VERSION') | default(false, true) }}"
    platform_install_role:
      - ansible
      - terraform
      - helm
      - kubectl
      - packer
      - vault
    pip_install_packages:
      - bashate
      - kube-hunter
      - molecule
      - awscli
    platform_download_packages:
      - name: krew
        repo: kubernetes-sigs/krew
        version: "{{ lookup('env', 'KREW_VERSION') | default('latest', true) }}"
        filename: "krew-%OS%_%ARCH%.tar.gz"
        extracted_filename: "krew-%OS%_%ARCH%"
      - name: tfsec
        repo: aquasecurity/tfsec
        version: "{{ lookup('env', 'TFSEC_VERSION') | default('latest', true) }}"
        filename: "tfsec-%OS%-%ARCH%"
      - name: trivy
        repo: aquasecurity/trivy
        version: "{{ lookup('env', 'TRIVY_VERSION') | default('latest', true) }}"
        filename: "trivy_%NVERSION%_%OS%-64bit.tar.gz"
      - name: tk
        repo: grafana/tanka
        version: "{{ lookup('env', 'TK_VERSION') | default('latest', true) }}"
        filename: "tk-%OS%-%ARCH%"
      - name: jb
        repo: jsonnet-bundler/jsonnet-bundler
        version: "{{ lookup('env', 'JB_VERSION') | default('latest', true) }}"
        filename: "jb-%OS%-%ARCH%"
      - name: kind
        repo: kubernetes-sigs/kind
        version: "{{ lookup('env', 'KIND_VERSION') | default('latest', true) }}"
        filename: "kind-%OS%-%ARCH%"
      - name: terraform-docs
        repo: terraform-docs/terraform-docs
        version: "{{ lookup('env', 'TFDOCS_VERSION') | default('latest', true) }}"
        filename: "terraform-docs-%VERSION%-%OS%-%ARCH%.tar.gz"
  tasks:
    # Running pre-defined roles
    - name: Ensure roles are executed
      include_role:
        name: "{{ role }}"
      loop_control:
        loop_var: role
      loop: "{{ platform_install_role }}"

    # Install pip packages
    - name: Ensure pip_install_packages are installed.
      ansible.builtin.pip:
        name: "{{ pip_pkg.name | default(pip_pkg) }}"
        version: "{{ pip_pkg.version | default(omit) }}"
        virtualenv: "{{ pip_pkg.virtualenv | default(omit) }}"
        state: "{{ pip_pkg.state | default(omit) }}"
        executable: "{{ pip_executable | default(omit) }}"
      loop_control:
        loop_var: pip_pkg
      loop: "{{ pip_install_packages }}"

    # Install gcloud
    - name: Ensure gcloud installer is downloaded and extracted
      ansible.builtin.unarchive:
        src: "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-{{ gcloud_version }}-linux-x86_64.tar.gz"
        dest: "{{ ansible_user_dir }}/bin"
        remote_src: true

    - name: Ensure gcloud is installed
      ansible.builtin.command:
        cmd: "{{ ansible_user_dir }}/bin/google-cloud-sdk/install.sh"
        creates: "{{ ansible_user_dir }}/.config/gcloud"

    # Install helm-diff
    - name: Ensure helm-diff is installed
      ansible.builtin.command:
        cmd: "{{ ansible_user_dir }}/bin/helm plugin install https://github.com/databus23/helm-diff"
        creates: "{{ ansible_user_dir }}/.local/share/helm/plugins/helm-diff"

    # Install Binaries from GitHub
    - name: Ensure GitHub packages are downloaded
      include_tasks: github_download.yml
      loop: "{{ platform_download_packages }}"
      loop_control:
        loop_var: github_pkg

    # Install OhMyBash
    - name: Ensure OhMyBash installer is downloaded
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh
        dest: /tmp/ohmybash.sh
        mode: '0700'

    - name: Ensure OhMyBash is installed
      ansible.builtin.command:
        cmd: /tmp/ohmybash.sh --unattended
        creates: "{{ ansible_user_dir }}/.oh-my-bash"

    - name: Ensure .fzf.bash is installed
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.bash
        dest: "{{ ansible_user_dir }}/.fzf.bash"
        mode: '0600'

    - name: Ensure bashrc is configured
      ansible.builtin.copy:
        dest: "{{ ansible_user_dir }}/.bashrc"
        mode: '0600'
        content: |
          ### Paths for installed binaries
          export PATH="/usr/local/bin:/usr/bin:/bin"
          export PATH="{{ ansible_user_dir }}/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/.local/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/bin/google-cloud-sdk/bin:${PATH}"
          export PATH="${KREW_ROOT:-${HOME}/.krew}/bin:${PATH}"

          ### OhMyBash Config
          # Enable the subsequent settings only in interactive sessions
          case $- in
            *i*) ;;
              *) return;;
          esac

          # Path to your oh-my-bash installation.
          export OSH={{ ansible_user_dir }}/.oh-my-bash

          OSH_THEME="sirup"
          DISABLE_AUTO_UPDATE="true"
          completions=(
            git
            docker
            kubectl
            ssh
            vault
          )
          aliases=(
            general
          )
          plugins=(
            git
            bashmarks
            kubectl
          )

          source "$OSH"/oh-my-bash.sh

          ### fzf configuration
          if [ -f "${HOME}/.fzf.bash" ] ; then
            source "${HOME}/.fzf.bash"
          fi

          ### Workstation inherited config
          if [ -d "${HOST_HOME:-/remote}" ] ; then
            # K/V pairs
            declare -A SYMLINK_PATHS

            # ansible
            SYMLINK_PATHS[".ansible"]=".ansible"
            SYMLINK_PATHS[".ansible.cfg"]=".ansible.cfg"

            # docker
            SYMLINK_PATHS[".docker"]=".docker"

            # gcloud
            SYMLINK_PATHS[".gcp"]=".gcp"
            SYMLINK_PATHS[".config/gcloud"]=".config/gcloud"

            # gitconfig
            SYMLINK_PATHS[".gitconfig"]=".gitconfig"

            # kubectl
            SYMLINK_PATHS[".kube"]=".kube"
            SYMLINK_PATHS[".krew"]=".krew"
            SYMLINK_PATHS[".kubectl_aliases"]=".kubectl_aliases"

            # helm
            SYMLINK_PATHS[".config/helm"]=".config/helm"
            SYMLINK_PATHS[".cache/helm"]=".cache/helm"
            SYMLINK_PATHS[".local/share/helm"]=".local/share/helm"
            SYMLINK_PATHS["Library/Preferences/helm"]=".config/helm"
            SYMLINK_PATHS["Library/Caches/helm"]=".cache/helm"

            # ssh
            SYMLINK_PATHS[".ssh"]=".ssh"
            SYMLINK_PATHS[".ssh/config"]=".ssh/config"

            # vault
            SYMLINK_PATHS[".vault-token"]=".vault-token"

            # vim
            SYMLINK_PATHS[".vim"]=".vim"
            SYMLINK_PATHS[".vimrc"]=".vimrc"

            for k in "${!SYMLINK_PATHS[@]}" ; do
              if [ ! -e "${HOME}/${SYMLINK_PATHS[${k}]}" ] \
                && [ ! -d "${HOME}/${SYMLINK_PATHS[${k}]}" ] ; then
                if [ -e "${HOST_HOME:-/remote}/${k}" ] ; then
                  if [ ! -d "$(dirname "${HOME}/${SYMLINK_PATHS[${k}]}")" ] ; then
                    mkdir -p "$(dirname "${HOME}/${SYMLINK_PATHS[${k}]}")"
                  fi
                  ln -s \
                    "${HOST_HOME:-/remote}/${k}" \
                    "${HOME}/${SYMLINK_PATHS[${k}]}"
                fi
              fi
            done
          fi

          ### Paths for installed binaries
          export PATH="/usr/local/bin:/usr/bin:/bin"
          export PATH="{{ ansible_user_dir }}/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/.local/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/bin/google-cloud-sdk/bin:${PATH}"
          export PATH="${KREW_ROOT:-${HOME}/.krew}/bin:${PATH}"

          ### docker-socat script for VSCode devcontainers
          if [ -f /usr/local/bin/docker-socat ] ; then
            [ -n "${REMOTE_CONTAINERS:-}" ] && sudo docker-socat
          fi

          ### Aliases
          alias kctx='kubectl ctx'
          alias kns='kubectl ns'