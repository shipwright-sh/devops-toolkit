---
- name: Configure Platform Toolkit
  hosts: workstation
  vars:
    controller_ansible_version: "{{ lookup('env', 'ANSIBLE_VERSION') | default(false, true) }}"
    awscli_version: false
    github_download_location: $HOME/bin
    github_download_packages:
      - name: tfsec
        repo: aquasecurity/tfsec
        version: latest
        filename: "tfsec-%OS%-%ARCH%"
      - name: grype
        repo: anchore/grype
        version: latest
        filename: grype_%NVERSION%_%OS%_%ARCH%.tar.gz
      - name: tk
        repo: grafana/tanka
        version: latest
        filename: tk-%OS%-%ARCH%
      - name: jb
        repo: jsonnet-bundler/jsonnet-bundler
        version: latest
        filename: jb-%OS%-%ARCH%
      - name: kind
        repo: kubernetes-sigs/kind
        version: latest
        filename: kind-%OS%-%ARCH%
    platform_install_role:
      - ansible
      - awscli
      - terraform
      - helm
      - kubectl
      - github_downloader
    pip_install_packages:
      - bashate
      - molecule
  tasks:
    # Running pre-defined roles
    - name: Ensure roles are executed
      include_role:
        name: "{{ role }}"
      loop_control:
        loop_var: role
      loop: "{{ platform_install_role }}"

    # Install pip packages
    - name: Ensure pip_install_packages are installed.
      ansible.builtin.pip:
        name: "{{ pip_pkg.name | default(pip_pkg) }}"
        version: "{{ pip_pkg.version | default(omit) }}"
        virtualenv: "{{ pip_pkg.virtualenv | default(omit) }}"
        state: "{{ pip_pkg.state | default(omit) }}"
        executable: "{{ pip_executable | default(omit) }}"
      loop_control:
        loop_var: pip_pkg
      loop: "{{ pip_install_packages }}"

    # Install helm-diff
    - name: Ensure helm-diff is installed
      ansible.builtin.command:
        cmd: "{{ ansible_user_dir }}/bin/helm plugin install https://github.com/databus23/helm-diff"
        creates: "{{ ansible_user_dir }}/.local/share/helm/plugins/helm-diff"

    # Install granted
    - name: Ensure granted is installed
      ansible.builtin.unarchive:
        src: "https://releases.commonfate.io/granted/v0.2.9/granted_0.2.9_linux_x86_64.tar.gz"
        dest: "{{ ansible_user_dir }}/bin"
        remote_src: yes

    # Install OhMyBash
    - name: Ensure OhMyBash installer is downloaded
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh
        dest: /tmp/ohmybash.sh
        mode: '0700'

    - name: Ensure OhMyBash is installed
      ansible.builtin.command:
        cmd: /tmp/ohmybash.sh --unattended
        creates: "{{ ansible_user_dir }}/.oh-my-bash"

    - name: Ensure .fzf.bash is installed
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.bash
        dest: "{{ ansible_user_dir }}/.fzf.bash"
        mode: '0600'

    - name: Ensure bashrc is configured
      ansible.builtin.copy:
        dest: "{{ ansible_user_dir }}/.bashrc"
        mode: '0600'
        content: |
          ### Paths for installed binaries
          export PATH="/usr/local/bin:/usr/bin:/bin"
          export PATH="{{ ansible_user_dir }}/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/.local/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/bin/google-cloud-sdk/bin:${PATH}"
          export PATH="${KREW_ROOT:-${HOME}/.krew}/bin:${PATH}"

          ### OhMyBash Config
          # Enable the subsequent settings only in interactive sessions
          case $- in
            *i*) ;;
              *) return;;
          esac

          # Path to your oh-my-bash installation.
          export OSH={{ ansible_user_dir }}/.oh-my-bash

          OSH_THEME="sirup"
          DISABLE_AUTO_UPDATE="true"
          completions=(
            git
            docker
            kubectl
            ssh
            vault
          )
          aliases=(
            general
          )
          plugins=(
            git
            bashmarks
            kubectl
          )

          source "$OSH"/oh-my-bash.sh

          ### fzf configuration
          if [ -f "${HOME}/.fzf.bash" ] ; then
            source "${HOME}/.fzf.bash"
          fi

          ### Workstation inherited config
          if [ -d "${HOST_HOME:-/remote}" ] ; then
            # K/V pairs
            declare -A SYMLINK_PATHS

            # ansible
            SYMLINK_PATHS[".ansible"]=".ansible"
            SYMLINK_PATHS[".ansible.cfg"]=".ansible.cfg"

            # docker
            SYMLINK_PATHS[".docker"]=".docker"

            # gcloud
            SYMLINK_PATHS[".gcp"]=".gcp"
            SYMLINK_PATHS[".config/gcloud"]=".config/gcloud"

            # gitconfig
            SYMLINK_PATHS[".gitconfig"]=".gitconfig"

            # kubectl
            SYMLINK_PATHS[".kube"]=".kube"
            SYMLINK_PATHS[".krew"]=".krew"
            SYMLINK_PATHS[".kubectl_aliases"]=".kubectl_aliases"

            # helm
            SYMLINK_PATHS[".config/helm"]=".config/helm"
            SYMLINK_PATHS[".cache/helm"]=".cache/helm"
            SYMLINK_PATHS[".local/share/helm"]=".local/share/helm"
            SYMLINK_PATHS["Library/Preferences/helm"]=".config/helm"
            SYMLINK_PATHS["Library/Caches/helm"]=".cache/helm"

            # ssh
            SYMLINK_PATHS[".ssh"]=".ssh"
            SYMLINK_PATHS[".ssh/config"]=".ssh/config"

            # vault
            SYMLINK_PATHS[".vault-token"]=".vault-token"

            # vim
            SYMLINK_PATHS[".vim"]=".vim"
            SYMLINK_PATHS[".vimrc"]=".vimrc"

            for k in "${!SYMLINK_PATHS[@]}" ; do
              if [ ! -e "${HOME}/${SYMLINK_PATHS[${k}]}" ] \
                && [ ! -d "${HOME}/${SYMLINK_PATHS[${k}]}" ] ; then
                if [ -e "${HOST_HOME:-/remote}/${k}" ] ; then
                  if [ ! -d "$(dirname "${HOME}/${SYMLINK_PATHS[${k}]}")" ] ; then
                    mkdir -p "$(dirname "${HOME}/${SYMLINK_PATHS[${k}]}")"
                  fi
                  ln -s \
                    "${HOST_HOME:-/remote}/${k}" \
                    "${HOME}/${SYMLINK_PATHS[${k}]}"
                fi
              fi
            done
          fi

          ### Paths for installed binaries
          export PATH="/usr/local/bin:/usr/bin:/bin"
          export PATH="{{ ansible_user_dir }}/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/.local/bin:${PATH}"
          export PATH="{{ ansible_user_dir }}/bin/google-cloud-sdk/bin:${PATH}"
          export PATH="${KREW_ROOT:-${HOME}/.krew}/bin:${PATH}"

          ### docker-socat script for VSCode devcontainers
          if [ -f /usr/local/bin/docker-socat ] ; then
            [ -n "${REMOTE_CONTAINERS:-}" ] && sudo docker-socat
          fi

          ### Aliases
          alias kctx='kubectl ctx'
          alias kns='kubectl ns'

          [ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases